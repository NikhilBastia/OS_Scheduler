var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "displayProcesses", function () {
  return displayProcesses;
});
_parcelHelpers.export(exports, "displayProcessesHandler", function () {
  return displayProcessesHandler;
});
var _configGlobalVar = require("../../config/globalVar");
const processInfoRows = document.querySelector(".process__info-initial-box");
const btnForm = document.querySelector(".form__btn");
const errorElement = document.getElementById("error");
const exclamationMark = document.querySelector(".exclamation__img");
const inputArrival = document.querySelector(".form__input--arrival");
const inputPriority = document.querySelector(".form__input--priority");
const inputBurst = document.querySelector(".form__input--burst");
const inputQuantum = document.querySelector(".form__input--quantum");
const displayProcesses = function (arrival, priority, burst) {
  const html = `
          <div class="row process__row">
              <div class="col-md-3 process__desc">Process ${_configGlobalVar.globalVar.i}</div>
              <div class="col-md-3 process__time">${arrival}</div>
              <div class="col-md-3 process__time">${priority}</div>
              <div class="col-md-3 process__time">${burst}</div>
          </div>
      `;
  processInfoRows.insertAdjacentHTML("beforeend", html);
  _configGlobalVar.globalVar.i += 1;
};
const displayProcessesHandler = function (publisher) {
  btnForm.addEventListener("click", function (event) {
    let errorMsgs = [];
    errorElement.innerText = "";
    exclamationMark.classList.add("hidden");
    const arrivalTime = Number(inputArrival.value);
    const priority = Number(inputPriority.value);
    const burstTime = Number(inputBurst.value);
    const quantum = Number(inputQuantum.value);
    const pushError = inputArrival.value === "" || inputBurst.value === "" || inputQuantum.value === "";
    if (pushError) {
      errorMsgs.push("Please fill all the inputs");
      errorElement.innerText = errorMsgs[0];
      exclamationMark.classList.remove("hidden");
    } else {
      console.log("in else part");
      _configGlobalVar.globalVar.arrivalTimes.push(arrivalTime);
      _configGlobalVar.globalVar.priorities.push(priority);
      _configGlobalVar.globalVar.burstTimes.push(burstTime);
      _configGlobalVar.globalVar.processId.push(_configGlobalVar.globalVar.pid);
      _configGlobalVar.globalVar.pid += 1;
      publisher(arrivalTime, priority, burstTime);
      inputArrival.value = inputBurst.value = inputPriority.value = "";
    }
    event.preventDefault();
  });
};
