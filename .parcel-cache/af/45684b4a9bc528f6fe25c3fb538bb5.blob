var _viewsDisplayProcessViewDProcessView = require("../views/displayProcessView/dProcessView");
var _viewsFcfsViewFcfsView = require("../views/fcfsView/fcfsView");
var _viewsSjfViewSjfPreView = require("../views/sjfView/sjfPreView");
var _viewsSjfViewSjfNPreView = require("../views/sjfView/sjfNPreView");
var _viewsRoundRobinViewRrView = require("../views/roundRobinView/rrView");
var _viewsPriorityViewPrePriorityView = require("../views/priorityView/prePriorityView");
var _viewsPriorityViewNonPrePriorityView = require("../views/priorityView/nonPrePriorityView");
var _modelsFcfsAlgo = require("../models/fcfsAlgo");
var _modelsSjfPreAlgo = require("../models/sjfPreAlgo");
var _modelsSjfNPreAlgo = require("../models/sjfNPreAlgo");
var _modelsRrAlgo = require("../models/rrAlgo");
var _modelsPrePriorityAlgo = require("../models/prePriorityAlgo");
var _modelsNonPrePriorityAlgo = require("../models/nonPrePriorityAlgo");
const displayProcessController = function (arrivalTime, priority, burstTime) {
  _viewsDisplayProcessViewDProcessView.displayProcesses(arrivalTime, priority, burstTime);
};
const fcfsSchedulingController = function (processId, arrivalTimes, burstTimes) {
  _modelsFcfsAlgo.FCFS(processId, arrivalTimes, burstTimes, _viewsFcfsViewFcfsView.displayFinalProcess);
};
const sjfPreSchedulingController = function (processId, burstTimes, arrivalTimes) {
  _modelsSjfPreAlgo.SjfPreemptive(processId, burstTimes, arrivalTimes, _viewsSjfViewSjfPreView.displaySjfPrProcess);
};
const sjfNonPreController = function (processId, burstTimes, arrivalTimes) {
  _modelsSjfNPreAlgo.SjfNonPreemptive(processId, burstTimes, arrivalTimes, _viewsSjfViewSjfNPreView.displaySjfNprprocess);
};
const roundRobinController = function (processId, burstTimes, quantum, arrivalTimes) {
  _modelsRrAlgo.roundRobin(processId, burstTimes, quantum, arrivalTimes, _viewsRoundRobinViewRrView.displayRRProcess);
};
const prePriorityController = function (processId, burstTimes, priorities, arrivalTimes) {
  _modelsPrePriorityAlgo.priorityPremptive(processId, burstTimes, priorities, arrivalTimes, _viewsPriorityViewPrePriorityView.displayPriorityPremptive);
};
const nonPrePriorityController = function (processId, burstTimes, priorities, arrivalTimes) {
  _modelsNonPrePriorityAlgo.priorityNonPreemptive(processId, burstTimes, priorities, arrivalTimes, _viewsPriorityViewNonPrePriorityView.displayNonPriorityPremptive);
};
const init = function () {
  _viewsDisplayProcessViewDProcessView.displayProcessesHandler(displayProcessController);
  _viewsFcfsViewFcfsView.arrowHandler(fcfsSchedulingController);
  _viewsFcfsViewFcfsView.fcfsHandler(fcfsSchedulingController);
  _viewsSjfViewSjfPreView.sjfPreHandler(sjfPreSchedulingController);
  _viewsSjfViewSjfNPreView.sjfNonPreHandler(sjfNonPreController);
  _viewsRoundRobinViewRrView.roundRobinHandler(roundRobinController);
  _viewsPriorityViewPrePriorityView.prePriorityHandler(prePriorityController);
  _viewsPriorityViewNonPrePriorityView.nonPrePriorityHandler(nonPrePriorityController);
};
init();
